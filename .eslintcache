[{"/Users/katedubitski/Projects/ReactPlayground/react-hooks-practice/src/index.js":"1","/Users/katedubitski/Projects/ReactPlayground/react-hooks-practice/src/App.js":"2","/Users/katedubitski/Projects/ReactPlayground/react-hooks-practice/src/reportWebVitals.js":"3","/Users/katedubitski/Projects/ReactPlayground/react-hooks-practice/src/Component.js":"4"},{"size":500,"mtime":1611083582542,"results":"5","hashOfConfig":"6"},{"size":202,"mtime":1611083851033,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611083582544,"results":"8","hashOfConfig":"6"},{"size":1113,"mtime":1611083819125,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"16ssykp",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/katedubitski/Projects/ReactPlayground/react-hooks-practice/src/index.js",[],["21","22"],"/Users/katedubitski/Projects/ReactPlayground/react-hooks-practice/src/App.js",["23"],"import logo from './logo.svg';\nimport './App.css';\nimport Component from './Component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Component />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/katedubitski/Projects/ReactPlayground/react-hooks-practice/src/reportWebVitals.js",[],"/Users/katedubitski/Projects/ReactPlayground/react-hooks-practice/src/Component.js",["24"],"import React, { useState, useEffect, useRef } from 'react';\nimport randomColor from 'randomcolor';\n\nexport default function Component() {\n  const [count, setCount] = useState(30);\n  const [todo, setTodo] = useState('');\n\n  const inputRef = useRef();\n  const todoRef = useRef('');\n\n  const [color, setColor] = useState(null);\n  useEffect(() => {\n    setColor(randomColor());\n    inputRef.current.focus();\n  }, [count]);\n\n  return (\n    <div style={{ borderTop: `10px solid ${color}` }}>\n      {count}\n      <button onClick={() => setCount((currentCount) => currentCount - 1)}>\n        -\n      </button>\n      <button onClick={() => setCount((currentCount) => currentCount + 1)}>\n        +\n      </button>\n      <hr />\n      <input\n        ref={inputRef}\n        type=\"range\"\n        onChange={(e) => setCount(e.target.value)}\n        value={count}\n      />\n      <input\n        type=\"text\"\n        ref={todoRef}\n        value={todo}\n        onChange={(e) => setTodo(e.target.value)}\n      />\n    </div>\n  );\n}\n\nfunction Calculate() {\n  const renderCount = useRef(1);\n  return <div>{renderCount.current++}</div>;\n}\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":1,"column":8,"nodeType":"31","messageId":"32","endLine":1,"endColumn":12},{"ruleId":"29","severity":1,"message":"33","line":43,"column":10,"nodeType":"31","messageId":"32","endLine":43,"endColumn":19},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Calculate' is defined but never used.","no-global-assign","no-unsafe-negation"]